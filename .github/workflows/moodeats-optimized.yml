name: MoodEats CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'

# Cancel in-progress runs when new push happens
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_KEY: moodeats-v1

jobs:
  # Quick checks run first - fail fast
  quick-checks:
    runs-on: ubuntu-latest
    name: ‚ö° Quick Checks
    steps:
    - uses: actions/checkout@v3

    - name: Validate JSON
      run: |
        echo "üîç Validating JSON files..."
        for file in *.json; do
          if [ -f "$file" ]; then
            python3 -m json.tool "$file" > /dev/null || exit 1
            echo "‚úÖ $file is valid"
          fi
        done

    - name: Check file sizes
      run: |
        echo "üìè Checking file sizes..."
        for file in *.html; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            if [ $size -gt 500000 ]; then
              echo "‚ùå $file is too large: $(($size/1024))KB"
              exit 1
            fi
          fi
        done
        echo "‚úÖ All files within size limits"

    - name: Security scan
      run: |
        echo "üîí Security scanning..."
        # Check for exposed API keys or secrets
        if grep -r "api[_-]key\|secret\|password" *.html *.js 2>/dev/null | grep -v "searchTerms"; then
          echo "‚ö†Ô∏è Potential secrets detected"
          exit 1
        fi
        echo "‚úÖ No secrets detected"

  # Unit tests with caching
  unit-tests:
    runs-on: ubuntu-latest
    name: üß™ Unit Tests
    needs: quick-checks
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        npm ci --prefer-offline --no-audit

    - name: Run Jest tests with coverage
      run: |
        npm run test:unit -- --coverage --coverageReporters=json-summary --coverageReporters=text

    - name: Coverage summary
      if: always()
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          echo "üìä Coverage Report:"
          node -e "
          const coverage = require('./coverage/coverage-summary.json');
          const total = coverage.total;
          console.log('  Lines:', total.lines.pct + '%');
          console.log('  Statements:', total.statements.pct + '%');
          console.log('  Functions:', total.functions.pct + '%');
          console.log('  Branches:', total.branches.pct + '%');
          "
        fi

    - name: Upload coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # E2E tests - run in parallel by browser
  e2e-chrome:
    runs-on: ubuntu-latest
    name: üåê E2E Chrome
    needs: quick-checks
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache Playwright
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

    - name: Install deps
      run: |
        npm ci --prefer-offline --no-audit
        npx playwright install chromium --with-deps

    - name: Run Chrome tests
      run: |
        npx playwright test --project=chromium --reporter=dot

    - name: Upload results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: chrome-results
        path: test-results/

  e2e-firefox:
    runs-on: ubuntu-latest
    name: üåê E2E Firefox
    needs: quick-checks
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache Playwright
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

    - name: Install deps
      run: |
        npm ci --prefer-offline --no-audit
        npx playwright install firefox --with-deps

    - name: Run Firefox tests
      run: |
        npx playwright test --project=firefox --reporter=dot

    - name: Upload results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: firefox-results
        path: test-results/

  # Deploy only after all tests pass
  deploy:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to GitHub Pages
    needs: [unit-tests, e2e-chrome, e2e-firefox]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - uses: actions/checkout@v3

    - name: Optimize assets
      run: |
        echo "üóúÔ∏è Optimizing assets..."

        # Minify HTML (simple approach)
        for file in *.html; do
          if [ -f "$file" ]; then
            # Remove comments and extra whitespace
            sed -i 's/<!--.*-->//g' "$file"
            sed -i '/^[[:space:]]*$/d' "$file"
            echo "‚úÖ Optimized $file"
          fi
        done

        # Report sizes
        echo ""
        echo "üì¶ Final sizes:"
        du -h *.html | sort -h

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v3

    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

    - name: Verify deployment
      run: |
        echo "‚úÖ Deployed to GitHub Pages"
        echo "üîó URL: https://njrun1804.github.io/moodeats/"

        # Wait for deployment to propagate
        sleep 10

        # Test the live site
        response=$(curl -s -o /dev/null -w "%{http_code}" https://njrun1804.github.io/moodeats/)
        if [ "$response" = "200" ]; then
          echo "‚úÖ Site is live and responding"
        else
          echo "‚ö†Ô∏è Site returned HTTP $response"
        fi

  # Performance monitoring
  performance:
    runs-on: ubuntu-latest
    name: üèéÔ∏è Performance Check
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun \
          --collect.url=https://njrun1804.github.io/moodeats/ \
          --assert.preset=lighthouse:no-pwa \
          --upload.target=temporary-public-storage || true

  # Summary job
  summary:
    runs-on: ubuntu-latest
    name: üìä Pipeline Summary
    needs: [unit-tests, e2e-chrome, e2e-firefox, deploy]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "# üéØ MoodEats Pipeline Summary"
        echo ""
        echo "## Test Results"
        echo "- Quick Checks: ${{ needs.quick-checks.result || 'skipped' }}"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- E2E Chrome: ${{ needs.e2e-chrome.result }}"
        echo "- E2E Firefox: ${{ needs.e2e-firefox.result }}"
        echo ""
        echo "## Deployment"
        echo "- Deploy: ${{ needs.deploy.result || 'skipped' }}"
        echo "- Performance: ${{ needs.performance.result || 'pending' }}"
        echo ""

        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "‚úÖ **Successfully deployed to:** https://njrun1804.github.io/moodeats/"
        fi

        # Calculate total time
        echo ""
        echo "‚è±Ô∏è Total pipeline time: ~$(( ($(date +%s) - ${{ github.run_started_at || '0' }}) / 60 )) minutes"