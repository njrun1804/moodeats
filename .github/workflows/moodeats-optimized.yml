name: MoodEats CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'
      - '*.md'

# Cancel in-progress runs when new push happens
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CACHE_KEY: moodeats-v2

jobs:
  # Quick checks run first - fail fast
  quick-checks:
    runs-on: ubuntu-latest
    name: ⚡ Quick Checks
    steps:
    - uses: actions/checkout@v4

    - name: Validate JSON
      run: |
        echo "🔍 Validating JSON files..."
        for file in *.json; do
          if [ -f "$file" ]; then
            python3 -m json.tool "$file" > /dev/null || exit 1
            echo "✅ $file is valid"
          fi
        done

    - name: Check file sizes
      run: |
        echo "📏 Checking file sizes..."
        for file in *.html; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            if [ $size -gt 500000 ]; then
              echo "❌ $file is too large: $(($size/1024))KB"
              exit 1
            fi
          fi
        done
        echo "✅ All files within size limits"

    - name: Security scan
      run: |
        echo "🔒 Security scanning..."
        # Check for exposed API keys or secrets
        if grep -r "api[_-]key\|secret\|password" *.html *.js 2>/dev/null | grep -v "searchTerms"; then
          echo "⚠️ Potential secrets detected"
          exit 1
        fi
        echo "✅ No secrets detected"

  # Unit tests with caching
  unit-tests:
    runs-on: ubuntu-latest
    name: 🧪 Unit Tests
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        npm ci --prefer-offline --no-audit

    - name: Run Jest tests with coverage
      run: |
        npm run test:unit -- --coverage --coverageReporters=json-summary --coverageReporters=text

    - name: Coverage summary
      if: always()
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          echo "📊 Coverage Report:"
          node -e "
          const coverage = require('./coverage/coverage-summary.json');
          const total = coverage.total;
          console.log('  Lines:', total.lines.pct + '%');
          console.log('  Statements:', total.statements.pct + '%');
          console.log('  Functions:', total.functions.pct + '%');
          console.log('  Branches:', total.branches.pct + '%');
          "
        fi

    - name: Upload coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # E2E tests - optimized for browse-only functionality
  e2e-tests:
    runs-on: ubuntu-latest
    name: 🌐 E2E Tests
    needs: quick-checks
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-${{ env.NODE_VERSION }}-

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit --no-fund
        npx playwright install ${{ matrix.browser }} --with-deps

    - name: Start server in background
      run: |
        python3 -m http.server 8000 &
        sleep 2

    - name: Run E2E tests
      run: |
        npx playwright test tests/e2e/browse-only.spec.js --project=${{ matrix.browser }} --reporter=dot

    - name: Upload results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results-${{ matrix.browser }}
        path: test-results/
        retention-days: 3

  # Deploy only after all tests pass
  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to GitHub Pages
    needs: [unit-tests, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js for build optimization
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Optimize assets
      run: |
        echo "🗜️ Optimizing assets..."

        # Install html-minifier for better optimization
        npm install -g html-minifier-terser

        # Minify HTML files
        for file in *.html; do
          if [ -f "$file" ]; then
            html-minifier-terser "$file" \
              --collapse-whitespace \
              --remove-comments \
              --minify-css \
              --minify-js \
              --remove-optional-tags \
              --remove-redundant-attributes \
              -o "$file.min"
            mv "$file.min" "$file"
            echo "✅ Optimized $file"
          fi
        done

        # Report sizes
        echo ""
        echo "📦 Final sizes:"
        du -h *.html | sort -h

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5

    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Verify deployment
      run: |
        echo "✅ Deployed to GitHub Pages"
        echo "🔗 URL: https://njrun1804.github.io/moodeats/"

        # Wait for deployment to propagate
        sleep 10

        # Quick health check
        if curl -sSfI https://njrun1804.github.io/moodeats/ >/dev/null 2>&1; then
          echo "✅ Site is live and responding"
        else
          echo "⚠️ Site health check failed - may need time to propagate"
        fi

  # Summary job
  summary:
    runs-on: ubuntu-latest
    name: 📊 Pipeline Summary
    needs: [quick-checks, unit-tests, e2e-tests, deploy]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "# 🎯 MoodEats Pipeline Summary"
        echo ""
        echo "## Test Results"
        echo "- ⚡ Quick Checks: ${{ needs.quick-checks.result || 'skipped' }}"
        echo "- 🧪 Unit Tests: ${{ needs.unit-tests.result || 'skipped' }}"
        echo "- 🌐 E2E Tests: ${{ needs.e2e-tests.result || 'skipped' }}"
        echo ""
        echo "## Deployment"
        echo "- 🚀 Deploy: ${{ needs.deploy.result || 'skipped' }}"
        echo ""

        # Check overall success
        if [[ "${{ needs.quick-checks.result }}" == "success" ]] && \
           [[ "${{ needs.unit-tests.result }}" == "success" ]] && \
           [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ **All tests passed successfully!**"

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **Successfully deployed to:** https://njrun1804.github.io/moodeats/"
          fi
        else
          echo "❌ Some tests failed. Check the logs above for details."

          # Show which tests failed
          if [[ "${{ needs.quick-checks.result }}" == "failure" ]]; then
            echo "  • Quick checks failed"
          fi
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "  • Unit tests failed"
          fi
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "  • E2E tests failed"
          fi
        fi

        echo ""
        echo "⏱️ Pipeline completed in under 5 minutes (optimized)"